Time Complexity and Big-O-notation:
Time complexity is the way to describes the amount of time it takes to run an algorithm. Time complexity of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input
Ex:
1. Linear Time: Time taken to run the code increases linearly with respect to increase in time.
2. Consatnt Time
3. Quadratic Time

The same thing mentioned above can be expressed in mathematical notation form using Big-O-notation.
Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.
Ex:
1. Linear Time: O(n)
2. Consatnt Time: O(1)
3. Quadratic Time: O(n2)

